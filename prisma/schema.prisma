// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]

    isAdmin         Boolean   @default(false)

    content         Json?     @default("{ \"cars\": {}, \"tracks\": {} }")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Track {
    packageId   Int     @id
    trackName   String

    schedules   ScheduleItem[]
}

model Car {
    packageId   Int     @id
    carName     String
    carIds      Json

    carClasses  CarClass[]
}

model CarClass {
    id          Int     @id
    name        String
    cars        Car[]

    schedules   ScheduleItem[]
}

model ScheduleItem {
    id              String          @id @default(cuid()) @unique
    carClasses      CarClass[]
    fixedSetup      Boolean
    licenseGroup    Int
    multiclass      Boolean
    official        Boolean
    seriesId        Int
    seriesName      String
    startType       String
    trackPackageId  Int
    weekId          String          @unique

    track           Track           @relation(fields: [trackPackageId], references: [packageId])
    weeks           WeekSchedule[]

}

model WeekSchedule {
    id             String       @id @default(cuid()) @unique
    scheduleId     String
    @@index([scheduleId])
    schedule       ScheduleItem @relation(fields: [scheduleId], references: [id])
}
